<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Additional_identity_question extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Model_additional_identity_question');
        $this->load->model('Model_additional_identity_option');
        $this->load->model('Model_input_type');
    }

    /*
     * Listing of additional_identity_question
     */
    function index()
    {
        $data['additional_identity_question'] = $this->Model_additional_identity_question->get_all_additional_identity_question();

        $data['_view'] = 'additional_identity_question/index';
        $data['title'] = 'Additional identity question';

        $this->load->view('AdminUser/template/header',$data);
        $this->load->view('AdminUser/additional_identity_question/index',$data);
        $this->load->view('AdminUser/template/footer',$data);
    }

    /*
     * Adding a new additional_identity_question
     */
    function add()
    {
        $this->load->library('form_validation');

		$this->form_validation->set_rules('QUESTION','QUESTION','required|max_length[1024]');
		$this->form_validation->set_rules('ID_FORM','ID FORM','required');

		if($this->form_validation->run())
        {
            $params = array(
				'ID_FORM' => $this->input->post('ID_FORM'),
				'QUESTION' => $this->input->post('QUESTION'),
            );

            $additional_identity_question_id = $this->Model_additional_identity_question->add_additional_identity_question($params);
            redirect(site_url('Form/edit/'.$this->input->post('ID_FORM')));
        }
        else
        {
			$this->load->model('Model_form');
			//$data['all_form'] = $this->Model_form->get_all_form();
            $data['idForm'] = $this->input->post('ID_FORM');

            $data['_view'] = 'additional_identity_question/add';
            $data['title'] = 'Add additional identity question';

            $this->load->view('AdminUser/template/header',$data);
            $this->load->view('AdminUser/additional_identity_question/add',$data);
            $this->load->view('AdminUser/template/footer',$data);
        }
    }

    /*
     * Editing a additional_identity_question
     */
    function edit($ID_ADDITIONAL_IDENTITY_QUESTION)
    {
        // check if the additional_identity_question exists before trying to edit it
        $data['additional_identity_question'] = $this->Model_additional_identity_question->get_additional_identity_question($ID_ADDITIONAL_IDENTITY_QUESTION);
        $this->session->currentAdditionalIdentityQuestion = $ID_ADDITIONAL_IDENTITY_QUESTION;
        if(isset($data['additional_identity_question']['ID_ADDITIONAL_IDENTITY_QUESTION']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('QUESTION','QUESTION','required|max_length[1024]');
			$this->form_validation->set_rules('ID_FORM','ID FORM','required');

			if($this->form_validation->run())
            {
                $params = array(
					'ID_FORM' => $this->input->post('ID_FORM'),
					'QUESTION' => $this->input->post('QUESTION'),
                );

                $this->Model_additional_identity_question->update_additional_identity_question($ID_ADDITIONAL_IDENTITY_QUESTION,$params);
                redirect(site_url('Form/edit/'.$this->session->currentForm));
            }
            else
            {
				$this->load->model('Model_form');
				$data['all_form'] = $this->Model_form->get_all_form();
				$data['all_input_type'] = $this->Model_input_type->get_all_input_type();

                $data['_view'] = 'additional_identity_question/edit';
                $data['title'] = 'Edit additional identity question';

                $data['additional_identity_option'] = $this->Model_additional_identity_option->get_all_additional_identity_option_per_id($this->uri->segment(3));

                $this->load->view('AdminUser/template/header',$data);
                $this->load->view('AdminUser/additional_identity_question/edit',$data);
                $this->load->view('AdminUser/additional_identity_option/index',$data);
                $this->load->view('AdminUser/template/footer',$data);
            }
        }
        else
            show_error('The additional_identity_question you are trying to edit does not exist.');
    }

    /*
     * Deleting additional_identity_question
     */
    function remove($ID_ADDITIONAL_IDENTITY_QUESTION)
    {
        $additional_identity_question = $this->Model_additional_identity_question->get_additional_identity_question($ID_ADDITIONAL_IDENTITY_QUESTION);

        // check if the additional_identity_question exists before trying to delete it
        if(isset($additional_identity_question['ID_ADDITIONAL_IDENTITY_QUESTION']))
        {
            $this->Model_additional_identity_question->delete_additional_identity_question($ID_ADDITIONAL_IDENTITY_QUESTION);
            redirect(site_url('Form/edit/'.$this->session->currentForm));
        }
        else
            show_error('The additional_identity_question you are trying to delete does not exist.');
    }

}
